@using WebApplication1.Models
@model LoginViewModel
@{
    ViewBag.Title = "Log in";
}

<h2>@ViewBag.Title.</h2>
<div class="row">
    <div class="col-md-8">
        <section id="loginForm">
            @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                <h4>Use a local account to log in.</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <div class="checkbox">
                            @Html.CheckBoxFor(m => m.RememberMe)
                            @Html.LabelFor(m => m.RememberMe)
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Log in" class="btn btn-default" />
                    </div>
                </div>
                <p>
                    @Html.ActionLink("Register as a new user", "Register")
                </p>
                @* Enable this once you have account confirmation enabled for password reset functionality
                    <p>
                        @Html.ActionLink("Forgot your password?", "ForgotPassword")
                    </p>*@
            }
        </section>
    </div>
    <div class="col-md-4">
        <section id="socialLoginForm">
            @Html.Partial("_ExternalLoginsListPartial", new ExternalLoginListViewModel { ReturnUrl = ViewBag.ReturnUrl })

            <div class="form-horizontal">
                <div class="form-group">
                    <div class="col-sm-6 col-sm-offset-3 col-xs-12">
                        <a id="login-button" href="#" class="btn btn-default btn-login">
                            <span id="login-icon-normal">
                                <i class="fa fa-sign-in"></i>
                            </span>
                            <span id="login-icon-loading" hidden>
                                <i class="fa fa-spinner fa-spin"></i>
                            </span>
                            Windows Log in
                        </a>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
           $("#login-button").click(function (e) {

                localStorage.removeItem('tokenKey');
                var url = '/api/account/ntlmlogin';
                debugger;
                $.ajax({
                    method: 'GET',
                    url: url + '?redirectUrl=' + url
                }).done(function (data, status, xhr) {
                    debugger;
                    localStorage.setItem('tokenKey', data.access_token);

                    $.ajaxSetup({
                        crossDomain: true,
                        beforeSend: function (xhr) {
                            var token = localStorage.getItem('tokenKey');
                            if (token != null) {
                                xhr.setRequestHeader('Authorization', 'Bearer ' + token);
                            }
                        }
                    });

                }).fail(function (jqXHR, textStatus) {
                    debugger;
                    localStorage.removeItem('tokenKey');
                });
            });
    </script>
}